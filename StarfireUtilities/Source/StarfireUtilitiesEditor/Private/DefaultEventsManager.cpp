
#include "DefaultEventsManager.h"

// BlueprintGraph
#include "K2Node_Event.h"

// UnrealEd
#include "Kismet2/KismetEditorUtilities.h"
#include "Subsystems/AssetEditorSubsystem.h"

TArray< FClassDefaultEvents > UDefaultEventsManager::UpdateClasses;

void UDefaultEventsManager::Initialize( FSubsystemCollectionBase &Collection )
{
	Super::Initialize( Collection );

	const auto Subsystem = Collection.InitializeDependency< UAssetEditorSubsystem >( );	

	Subsystem->OnEditorOpeningPreWidgets( ).AddUObject( this, &UDefaultEventsManager::OnEditorOpening );

	// For the registered types, do the default event registrations
	for (const auto &DefaultEvents : UpdateClasses)
	{
		const auto Type = DefaultEvents.Type;
		for (const auto &EventName : DefaultEvents.DefaultEvents)
			FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent( this, Type, EventName );
	}
}

// ReSharper disable once CppMemberFunctionMayBeStatic
// ReSharper disable once CppMemberFunctionMayBeConst
void UDefaultEventsManager::OnEditorOpening( const TArray< UObject* > &Assets, IAssetEditorInstance *EditorInstance )
{
	const auto FindUpdateType = [ ]( const UClass *CheckType ) -> const FClassDefaultEvents*
	{
		while (CheckType != nullptr)
		{
			for (const auto &D : UpdateClasses)
			{
				if (D == CheckType)
					return &D;
			}

			CheckType = CheckType->GetSuperClass( );
		}
		
		return nullptr;
	};

	const auto CollateBlueprintEvents = [ ]( const UBlueprint *Blueprint ) -> TSet< FName >
	{
		TSet< FName > BlueprintEvents;
		
		for (const auto U : Blueprint->UbergraphPages)
		{
			for (const auto N : U->Nodes)
			{
				if (const auto E = Cast< UK2Node_Event >( N ))
					BlueprintEvents.Add( E->GetFunctionName( ) );
			}
		}

		for (const auto F : Blueprint->FunctionGraphs)
			BlueprintEvents.Add( F->GetFName( ) );

		
		return BlueprintEvents;
	};

	// For any blueprints that are opened, check if it's a type we know about and create any missing events
	for (const auto A : Assets)
	{
		const auto BlueprintAsset = Cast< UBlueprint >( A );
		if (BlueprintAsset == nullptr)
			continue;

		const auto Type = BlueprintAsset->ParentClass.Get( );
		const auto DefaultEvents = FindUpdateType( Type );
		if (DefaultEvents == nullptr)
			continue;

		auto Events = TSet( DefaultEvents->DefaultEvents );
		auto BlueprintEvents = CollateBlueprintEvents( BlueprintAsset );
		auto MissingEvents = Events.Difference( BlueprintEvents );

		int32 NodeY = 0;
		int32 MaxNodeWidth = 0;
		TArray< UK2Node_Event* > NewEventNodes;
		for (const auto &Event : MissingEvents)
		{
			UK2Node_Event *NewNode = FKismetEditorUtilities::AddDefaultEventNode( BlueprintAsset, BlueprintAsset->UbergraphPages[ 0 ], Event, DefaultEvents->Type, NodeY );

			if (NewNode->NodeWidth > MaxNodeWidth)
				MaxNodeWidth = NewNode->NodeWidth;
			
			NewEventNodes.Push( NewNode );
		}

		// offset all the new nodes to the left (since finding an initial Y could be a problem and most work moves from the defaults at 0 to the right)
		for (const auto &Event : NewEventNodes)
			Event->NodePosX = -MaxNodeWidth - 400;
	}
}
